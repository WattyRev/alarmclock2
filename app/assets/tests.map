{"version":3,"sources":["alarm-clock/tests/app.jshint.js","alarm-clock/tests/components/active-alarm.jshint.js","alarm-clock/tests/components/alarm-control.jshint.js","alarm-clock/tests/components/alarm-form.jshint.js","alarm-clock/tests/components/alarm-item.jshint.js","alarm-clock/tests/components/prepare-alarm.jshint.js","alarm-clock/tests/components/the-clock.jshint.js","alarm-clock/tests/components/the-rings.jshint.js","alarm-clock/tests/components/touch-to.jshint.js","alarm-clock/tests/helpers/destroy-app.js","alarm-clock/tests/helpers/destroy-app.jshint.js","alarm-clock/tests/helpers/module-for-acceptance.js","alarm-clock/tests/helpers/module-for-acceptance.jshint.js","alarm-clock/tests/helpers/resolver.js","alarm-clock/tests/helpers/resolver.jshint.js","alarm-clock/tests/helpers/start-app.js","alarm-clock/tests/helpers/start-app.jshint.js","alarm-clock/tests/integration/components/active-alarm-test.js","alarm-clock/tests/integration/components/active-alarm-test.jshint.js","alarm-clock/tests/integration/components/alarm-control-test.js","alarm-clock/tests/integration/components/alarm-control-test.jshint.js","alarm-clock/tests/integration/components/alarm-form-test.js","alarm-clock/tests/integration/components/alarm-form-test.jshint.js","alarm-clock/tests/integration/components/alarm-item-test.js","alarm-clock/tests/integration/components/alarm-item-test.jshint.js","alarm-clock/tests/integration/components/prepare-alarm-test.js","alarm-clock/tests/integration/components/prepare-alarm-test.jshint.js","alarm-clock/tests/integration/components/the-clock-test.js","alarm-clock/tests/integration/components/the-clock-test.jshint.js","alarm-clock/tests/integration/components/the-rings-test.js","alarm-clock/tests/integration/components/the-rings-test.jshint.js","alarm-clock/tests/router.jshint.js","alarm-clock/tests/routes/alarms.jshint.js","alarm-clock/tests/routes/edit.jshint.js","alarm-clock/tests/routes/index.jshint.js","alarm-clock/tests/routes/new.jshint.js","alarm-clock/tests/services/alarms.jshint.js","alarm-clock/tests/services/sound.jshint.js","alarm-clock/tests/services/time.jshint.js","alarm-clock/tests/test-helper.js","alarm-clock/tests/test-helper.jshint.js","alarm-clock/tests/unit/routes/alarms-test.js","alarm-clock/tests/unit/routes/alarms-test.jshint.js","alarm-clock/tests/unit/routes/edit-test.js","alarm-clock/tests/unit/routes/edit-test.jshint.js","alarm-clock/tests/unit/routes/index-test.js","alarm-clock/tests/unit/routes/index-test.jshint.js","alarm-clock/tests/unit/routes/new-test.js","alarm-clock/tests/unit/routes/new-test.jshint.js","alarm-clock/tests/unit/services/alarms-test.js","alarm-clock/tests/unit/services/alarms-test.jshint.js","alarm-clock/tests/unit/services/sound-test.js","alarm-clock/tests/unit/services/sound-test.jshint.js","alarm-clock/tests/unit/services/time-test.js","alarm-clock/tests/unit/services/time-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('alarm-clock/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/components/active-alarm.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/active-alarm.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/active-alarm.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/components/alarm-control.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/alarm-control.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/alarm-control.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/components/alarm-form.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/alarm-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/alarm-form.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/components/alarm-item.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/alarm-item.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/alarm-item.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/components/prepare-alarm.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/prepare-alarm.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/prepare-alarm.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/components/the-clock.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/the-clock.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/the-clock.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/components/the-rings.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/the-rings.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/the-rings.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/components/touch-to.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/touch-to.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/touch-to.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('alarm-clock/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'alarm-clock/tests/helpers/start-app', 'alarm-clock/tests/helpers/destroy-app'], function (exports, _qunit, _alarmClockTestsHelpersStartApp, _alarmClockTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _alarmClockTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _alarmClockTestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('alarm-clock/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/helpers/resolver', ['exports', 'ember/resolver', 'alarm-clock/config/environment'], function (exports, _emberResolver, _alarmClockConfigEnvironment) {\n\n  var resolver = _emberResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _alarmClockConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _alarmClockConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('alarm-clock/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/helpers/start-app', ['exports', 'ember', 'alarm-clock/app', 'alarm-clock/config/environment'], function (exports, _ember, _alarmClockApp, _alarmClockConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _alarmClockConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _alarmClockApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('alarm-clock/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/integration/components/active-alarm-test', ['exports', 'ember-qunit', 'ember', 'ember-test-helpers/wait'], function (exports, _emberQunit, _ember, _emberTestHelpersWait) {\n\n    (0, _emberQunit.moduleForComponent)('active-alarm', 'Integration | Component | active alarm', {\n        integration: true\n    });\n\n    function copyObject(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    var timeService = {\n        now: {\n            getDay: function getDay() {\n                return 0;\n            },\n            getHours: function getHours() {\n                return 1;\n            },\n            getMinutes: function getMinutes() {\n                return 2;\n            },\n            getTime: function getTime() {\n                return 100;\n            }\n        },\n        weekDays: ['Today']\n    };\n    var alarmsService = {\n        alarms: [{\n            isEnabled: true,\n            selectedDays: {\n                today: true\n            },\n            hours: 1,\n            minutes: 2\n        }]\n    };\n\n    (0, _emberQunit.test)('it should render if the alarm is going off.', function (assert) {\n        assert.expect(1);\n        this.set('alarming', true);\n        this.render(_ember['default'].HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.10',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 34\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['inline', 'active-alarm', [], ['alarming', ['subexpr', '@mut', [['get', 'alarming', ['loc', [null, [1, 24], [1, 32]]]]], [], []]], ['loc', [null, [1, 0], [1, 34]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n        assert.equal(this.$('.alarm-control').length, 1);\n    });\n\n    (0, _emberQunit.test)('it should not render if the alarm is not going off', function (assert) {\n        assert.expect(1);\n        this.set('alarming', false);\n        this.render(_ember['default'].HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.10',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 34\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['inline', 'active-alarm', [], ['alarming', ['subexpr', '@mut', [['get', 'alarming', ['loc', [null, [1, 24], [1, 32]]]]], [], []]], ['loc', [null, [1, 0], [1, 34]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n        assert.equal(this.$('.alarm-control').length, 0);\n    });\n\n    (0, _emberQunit.test)('it should render if snoozing has completed', function (assert) {\n        assert.expect(1);\n        this.set('doneSnoozing', true);\n        this.render(_ember['default'].HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.10',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 42\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['inline', 'active-alarm', [], ['doneSnoozing', ['subexpr', '@mut', [['get', 'doneSnoozing', ['loc', [null, [1, 28], [1, 40]]]]], [], []]], ['loc', [null, [1, 0], [1, 42]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n        assert.equal(this.$('.alarm-control').length, 1);\n    });\n\n    (0, _emberQunit.test)('it should render if there is an alarm for the current time.', function (assert) {\n        assert.expect(1);\n        this.set('timeService', timeService);\n        this.set('alarmsService', alarmsService);\n\n        this.render(_ember['default'].HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.10',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 68\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['inline', 'active-alarm', [], ['timeService', ['subexpr', '@mut', [['get', 'timeService', ['loc', [null, [1, 27], [1, 38]]]]], [], []], 'alarmsService', ['subexpr', '@mut', [['get', 'alarmsService', ['loc', [null, [1, 53], [1, 66]]]]], [], []]], ['loc', [null, [1, 0], [1, 68]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n\n        assert.equal(this.$('.alarm-control').length, 1);\n    });\n\n    (0, _emberQunit.test)('it should not render if there is no relevant alarm', function (assert) {\n        assert.expect(5);\n\n        var alarms = copyObject(alarmsService);\n        alarms.alarms[0].isEnabled = false;\n        this.set('alarmsService', alarms);\n        this.set('timeService', timeService);\n\n        this.render(_ember['default'].HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.10',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 68\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['inline', 'active-alarm', [], ['timeService', ['subexpr', '@mut', [['get', 'timeService', ['loc', [null, [1, 27], [1, 38]]]]], [], []], 'alarmsService', ['subexpr', '@mut', [['get', 'alarmsService', ['loc', [null, [1, 53], [1, 66]]]]], [], []]], ['loc', [null, [1, 0], [1, 68]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n        assert.equal(this.$('.alarm-control').length, 0);\n\n        alarms = copyObject(alarmsService);\n        alarms.alarms[0].selectedDays.today = false;\n        this.set('alarmsService', alarms);\n        this.render(_ember['default'].HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.10',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 68\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['inline', 'active-alarm', [], ['timeService', ['subexpr', '@mut', [['get', 'timeService', ['loc', [null, [1, 27], [1, 38]]]]], [], []], 'alarmsService', ['subexpr', '@mut', [['get', 'alarmsService', ['loc', [null, [1, 53], [1, 66]]]]], [], []]], ['loc', [null, [1, 0], [1, 68]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n        assert.equal(this.$('.alarm-control').length, 0);\n\n        alarms = copyObject(alarmsService);\n        alarms.alarms[0].hours = 5;\n        this.set('alarmsService', alarms);\n        this.render(_ember['default'].HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.10',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 68\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['inline', 'active-alarm', [], ['timeService', ['subexpr', '@mut', [['get', 'timeService', ['loc', [null, [1, 27], [1, 38]]]]], [], []], 'alarmsService', ['subexpr', '@mut', [['get', 'alarmsService', ['loc', [null, [1, 53], [1, 66]]]]], [], []]], ['loc', [null, [1, 0], [1, 68]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n        assert.equal(this.$('.alarm-control').length, 0);\n\n        alarms = copyObject(alarmsService);\n        alarms.alarms[0].minutes = 5;\n        this.set('alarmsService', alarms);\n        this.render(_ember['default'].HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.10',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 68\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['inline', 'active-alarm', [], ['timeService', ['subexpr', '@mut', [['get', 'timeService', ['loc', [null, [1, 27], [1, 38]]]]], [], []], 'alarmsService', ['subexpr', '@mut', [['get', 'alarmsService', ['loc', [null, [1, 53], [1, 66]]]]], [], []]], ['loc', [null, [1, 0], [1, 68]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n        assert.equal(this.$('.alarm-control').length, 0);\n\n        alarms = copyObject(alarmsService);\n        alarms.alarms = [];\n        this.set('alarmsService', alarms);\n        this.render(_ember['default'].HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.10',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 68\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['inline', 'active-alarm', [], ['timeService', ['subexpr', '@mut', [['get', 'timeService', ['loc', [null, [1, 27], [1, 38]]]]], [], []], 'alarmsService', ['subexpr', '@mut', [['get', 'alarmsService', ['loc', [null, [1, 53], [1, 66]]]]], [], []]], ['loc', [null, [1, 0], [1, 68]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n        assert.equal(this.$('.alarm-control').length, 0);\n    });\n\n    (0, _emberQunit.test)('it should not render if the alarm was stopped recently', function (assert) {\n        assert.expect(1);\n\n        this.set('timeService', timeService);\n        this.set('alarmsService', alarmsService);\n        this.set('stopped', {\n            getTime: function getTime() {\n                return 0;\n            }\n        });\n        this.render(_ember['default'].HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.10',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 84\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['inline', 'active-alarm', [], ['timeService', ['subexpr', '@mut', [['get', 'timeService', ['loc', [null, [1, 27], [1, 38]]]]], [], []], 'alarmsService', ['subexpr', '@mut', [['get', 'alarmsService', ['loc', [null, [1, 53], [1, 66]]]]], [], []], 'stopped', ['subexpr', '@mut', [['get', 'stopped', ['loc', [null, [1, 75], [1, 82]]]]], [], []]], ['loc', [null, [1, 0], [1, 84]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n        assert.equal(this.$('.alarm-control').length, 0);\n    });\n\n    (0, _emberQunit.test)('the sound should play if the alarm is going off', function (assert) {\n        assert.expect(1);\n\n        var playing = false;\n        this.set('soundService', {\n            playing: false,\n            play: function play() {\n                playing = true;\n            },\n            stop: function stop() {\n                playing = false;\n            }\n        });\n        this.set('alarming', false);\n\n        this.render(_ember['default'].HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.10',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 60\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['inline', 'active-alarm', [], ['soundService', ['subexpr', '@mut', [['get', 'soundService', ['loc', [null, [1, 28], [1, 40]]]]], [], []], 'alarming', ['subexpr', '@mut', [['get', 'alarming', ['loc', [null, [1, 50], [1, 58]]]]], [], []]], ['loc', [null, [1, 0], [1, 60]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n\n        this.set('alarming', true);\n\n        return new _ember['default'].RSVP.Promise(function (resolve) {\n            _ember['default'].run.later(function () {\n                resolve();\n            }, 10);\n        }).then(function () {\n            assert.equal(playing, true);\n        });\n    });\n\n    (0, _emberQunit.test)('the sound should not play if the alarm is not going off', function (assert) {\n        assert.expect(1);\n\n        var playing = true;\n        this.set('soundService', {\n            playing: true,\n            play: function play() {\n                console.log('play');\n                playing = true;\n            },\n            stop: function stop() {\n                playing = false;\n            }\n        });\n        this.set('alarming', true);\n\n        this.render(_ember['default'].HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.10',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 60\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['inline', 'active-alarm', [], ['soundService', ['subexpr', '@mut', [['get', 'soundService', ['loc', [null, [1, 28], [1, 40]]]]], [], []], 'alarming', ['subexpr', '@mut', [['get', 'alarming', ['loc', [null, [1, 50], [1, 58]]]]], [], []]], ['loc', [null, [1, 0], [1, 60]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n\n        this.set('alarming', false);\n\n        return new _ember['default'].RSVP.Promise(function (resolve) {\n            _ember['default'].run.later(function () {\n                resolve();\n            }, 10);\n        }).then(function () {\n            assert.equal(playing, false);\n        });\n    });\n});","define('alarm-clock/tests/integration/components/active-alarm-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/active-alarm-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'integration/components/active-alarm-test.js should pass jshint.\\nintegration/components/active-alarm-test.js: line 4, col 8, \\'wait\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('alarm-clock/tests/integration/components/alarm-control-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('alarm-control', 'Integration | Component | alarm control', {\n    integration: true\n  });\n\n  // test('it renders', function(assert) {\n  //\n  //   // Set any properties with this.set('myProperty', 'value');\n  //   // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n  //\n  //   this.render(hbs`{{alarm-control}}`);\n  //\n  //   assert.equal(this.$().text().trim(), '');\n  //\n  //   // Template block usage:\" + EOL +\n  //   this.render(hbs`\n  //     {{#alarm-control}}\n  //       template block text\n  //     {{/alarm-control}}\n  //   `);\n  //\n  //   assert.equal(this.$().text().trim(), 'template block text');\n  // });\n});","define('alarm-clock/tests/integration/components/alarm-control-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/alarm-control-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'integration/components/alarm-control-test.js should pass jshint.\\nintegration/components/alarm-control-test.js: line 1, col 30, \\'test\\' is defined but never used.\\nintegration/components/alarm-control-test.js: line 2, col 8, \\'hbs\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('alarm-clock/tests/integration/components/alarm-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('alarm-form', 'Integration | Component | alarm form', {\n    integration: true\n  });\n\n  // test('it renders', function(assert) {\n  //\n  //   // Set any properties with this.set('myProperty', 'value');\n  //   // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n  //\n  //   this.render(hbs`{{alarm-form}}`);\n  //\n  //   assert.equal(this.$().text().trim(), '');\n  //\n  //   // Template block usage:\" + EOL +\n  //   this.render(hbs`\n  //     {{#alarm-form}}\n  //       template block text\n  //     {{/alarm-form}}\n  //   `);\n  //\n  //   assert.equal(this.$().text().trim(), 'template block text');\n  // });\n});","define('alarm-clock/tests/integration/components/alarm-form-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/alarm-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'integration/components/alarm-form-test.js should pass jshint.\\nintegration/components/alarm-form-test.js: line 1, col 30, \\'test\\' is defined but never used.\\nintegration/components/alarm-form-test.js: line 2, col 8, \\'hbs\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('alarm-clock/tests/integration/components/alarm-item-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('alarm-item', 'Integration | Component | alarm item', {\n    integration: true\n  });\n\n  // test('it renders', function(assert) {\n  //\n  //   // Set any properties with this.set('myProperty', 'value');\n  //   // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n  //\n  //   this.render(hbs`{{alarm-item}}`);\n  //\n  //   assert.equal(this.$().text().trim(), '');\n  //\n  //   // Template block usage:\" + EOL +\n  //   this.render(hbs`\n  //     {{#alarm-item}}\n  //       template block text\n  //     {{/alarm-item}}\n  //   `);\n  //\n  //   assert.equal(this.$().text().trim(), 'template block text');\n  // });\n});","define('alarm-clock/tests/integration/components/alarm-item-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/alarm-item-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'integration/components/alarm-item-test.js should pass jshint.\\nintegration/components/alarm-item-test.js: line 1, col 30, \\'test\\' is defined but never used.\\nintegration/components/alarm-item-test.js: line 2, col 8, \\'hbs\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('alarm-clock/tests/integration/components/prepare-alarm-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('prepare-alarm', 'Integration | Component | prepare alarm', {\n    integration: true\n  });\n\n  // test('it renders', function(assert) {\n  //\n  //   // Set any properties with this.set('myProperty', 'value');\n  //   // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n  //\n  //   this.render(hbs`{{prepare-alarm}}`);\n  //\n  //   assert.equal(this.$().text().trim(), '');\n  //\n  //   // Template block usage:\" + EOL +\n  //   this.render(hbs`\n  //     {{#prepare-alarm}}\n  //       template block text\n  //     {{/prepare-alarm}}\n  //   `);\n  //\n  //   assert.equal(this.$().text().trim(), 'template block text');\n  // });\n});","define('alarm-clock/tests/integration/components/prepare-alarm-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/prepare-alarm-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'integration/components/prepare-alarm-test.js should pass jshint.\\nintegration/components/prepare-alarm-test.js: line 1, col 30, \\'test\\' is defined but never used.\\nintegration/components/prepare-alarm-test.js: line 2, col 8, \\'hbs\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('alarm-clock/tests/integration/components/the-clock-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('the-clock', 'Integration | Component | the clock', {\n    integration: true\n  });\n\n  // test('it renders', function(assert) {\n  //\n  //   // Set any properties with this.set('myProperty', 'value');\n  //   // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n  //\n  //   this.render(hbs`{{the-clock}}`);\n  //\n  //   assert.equal(this.$().text().trim(), '');\n  //\n  //   // Template block usage:\" + EOL +\n  //   this.render(hbs`\n  //     {{#the-clock}}\n  //       template block text\n  //     {{/the-clock}}\n  //   `);\n  //\n  //   assert.equal(this.$().text().trim(), 'template block text');\n  // });\n});","define('alarm-clock/tests/integration/components/the-clock-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/the-clock-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'integration/components/the-clock-test.js should pass jshint.\\nintegration/components/the-clock-test.js: line 1, col 30, \\'test\\' is defined but never used.\\nintegration/components/the-clock-test.js: line 2, col 8, \\'hbs\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('alarm-clock/tests/integration/components/the-rings-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('the-rings', 'Integration | Component | the rings', {\n    integration: true\n  });\n\n  // test('it renders', function(assert) {\n  //\n  //   // Set any properties with this.set('myProperty', 'value');\n  //   // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n  //\n  //   this.render(hbs`{{the-rings}}`);\n  //\n  //   assert.equal(this.$().text().trim(), '');\n  //\n  //   // Template block usage:\" + EOL +\n  //   this.render(hbs`\n  //     {{#the-rings}}\n  //       template block text\n  //     {{/the-rings}}\n  //   `);\n  //\n  //   assert.equal(this.$().text().trim(), 'template block text');\n  // });\n});","define('alarm-clock/tests/integration/components/the-rings-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/the-rings-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'integration/components/the-rings-test.js should pass jshint.\\nintegration/components/the-rings-test.js: line 1, col 30, \\'test\\' is defined but never used.\\nintegration/components/the-rings-test.js: line 2, col 8, \\'hbs\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('alarm-clock/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/routes/alarms.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/alarms.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/alarms.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/routes/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/edit.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/routes/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/new.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/services/alarms.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services/alarms.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/alarms.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/services/sound.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services/sound.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/sound.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/services/time.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services/time.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/time.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/test-helper', ['exports', 'alarm-clock/tests/helpers/resolver', 'ember-qunit'], function (exports, _alarmClockTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_alarmClockTestsHelpersResolver['default']);\n});","define('alarm-clock/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/unit/routes/alarms-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:alarms', 'Unit | Route | alarms', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('alarm-clock/tests/unit/routes/alarms-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/alarms-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/alarms-test.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/unit/routes/edit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:edit', 'Unit | Route | edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('alarm-clock/tests/unit/routes/edit-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/edit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/edit-test.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('alarm-clock/tests/unit/routes/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/unit/routes/new-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:new', 'Unit | Route | new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('alarm-clock/tests/unit/routes/new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/new-test.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/unit/services/alarms-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:alarms', 'Unit | Service | alarms', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('alarm-clock/tests/unit/services/alarms-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/alarms-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/alarms-test.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/unit/services/sound-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:sound', 'Unit | Service | sound', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('alarm-clock/tests/unit/services/sound-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/sound-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/sound-test.js should pass jshint.');\n  });\n});","define('alarm-clock/tests/unit/services/time-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:time', 'Unit | Service | time', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('alarm-clock/tests/unit/services/time-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/time-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/time-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('alarm-clock/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}